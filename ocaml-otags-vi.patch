diff -ur otags-3.04.3/otags.ml otags-3.04.3-/otags.ml
--- otags-3.04.3/otags.ml	Fri Feb  1 17:11:34 2002
+++ otags-3.04.3-/otags.ml	Sun Nov 10 13:50:29 2002
@@ -33,7 +33,7 @@
 (* Parsing arguments *)
 let verbose, output, recursive, editor, targets, suffixes, camlp4, parsers = 
   let rverbose = ref false in
-  let routput = ref "TAGS" in
+  let routput = ref "" in
   let rrecursive = ref false in
   let reditor = ref Emacs in
   let rcamlp4 = ref "camlp4" in
@@ -65,7 +65,14 @@
     match p with 
     | [] -> default_parsers
     | _ :: _ -> p in
-  !rverbose, !routput, !rrecursive, !reditor, 
+  let output =  
+     if !routput = "" then 
+        match !reditor with
+        | Emacs -> "TAGS"
+        | Vi -> "tags"
+     else
+        !routput in
+  !rverbose, output, !rrecursive, !reditor, 
   targets (), Suffix.contents (), !rcamlp4, parsers
 
 let camlp4_libs pr_tags = parsers @ [ pr_tags ]
diff -ur otags-3.04.3/vi.ml otags-3.04.3-/vi.ml
--- otags-3.04.3/vi.ml	Mon Oct 22 14:54:43 2001
+++ otags-3.04.3-/vi.ml	Sun Nov 10 13:55:11 2002
@@ -3,10 +3,6 @@
 
 (* $Id$ *)
 
-let char_del = Char.chr 127
-let char_soh =  Char.chr 1
-let char_np = Char.chr 12
-
 let log s n = Printf.fprintf stderr "pb etag : %s, %d\n" s n; flush stderr
 
 let sized_string_of_file f taille =
@@ -25,6 +21,7 @@
   fs.[l-1] <- '\n';
   (fs,l)
 
+  
 module Line : sig
   val lookup : string * int -> unit
   val of_pos : int -> int * int
@@ -60,51 +57,63 @@
   let add etag (loc, last) =
     lifo := (etag, loc, last) :: !lifo; set_size_ml last
 
-  let line filename tagname linenum =
-    let etag = Printf.sprintf "%s  %s  /%i  f\n" tagname filename linenum in
+  let escape s =
+    let part_es = String.escaped s in
+    let buffer = Buffer.create (String.length part_es) in
+    String.iter (fun c ->
+                   match c with
+                   | '.' | '$' | '*' | '[' | ']' | '/' | '\\' -> 
+                       Buffer.add_char buffer '\\';
+                       Buffer.add_char buffer c
+                   | _ -> Buffer.add_char buffer c)
+                part_es;
+    Buffer.contents buffer        
+
+  let line filename tagname linebeg =
+    let etag =
+      Printf.sprintf "%s\t%s\t/^%s$/;\n" tagname filename (escape linebeg) in
     etag, (String.length etag)
 
-  (* TODO: use KMP *)
-  let rec search_forward pat str pos =
-    if String.sub str pos (String.length pat) = pat then pos
-    else search_forward pat str (pos + 1)
-
   let format filename (fs, l) =
     let rec loop lcur scur = function
       |	[] -> lcur,scur
       |	(entry, pos, last) :: rest ->
           let line_beg, _ = Line.of_pos pos in
-          (* let entry_pos = Str.search_forward (Str.regexp entry) fs line_beg in *)
-          let entry_pos = search_forward entry fs line_beg in
-          let line_beg, line_num = Line.of_pos entry_pos in
-	  let len = entry_pos - line_beg + String.length entry in
-    let fl, n = line filename entry line_num in
-	  loop (fl :: lcur) (n + scur) rest
-    in loop [] 0 !lifo
+          let len = 
+            (try String.index_from fs line_beg '\n' 
+             with Not_found -> String.length fs) - line_beg in
+          let fl, n = 
+             line filename entry (String.sub fs line_beg len) in
+             loop (fl :: lcur) (n + scur) rest in 
+    loop [] 0 !lifo
 
 end
 
 let add = Entry.add
 
-let header chan basesrc total = ()
+let header chan = Printf.fprintf chan 
+"!_TAG_FILE_FORMAT\t1\t/without ;\"/
+!_TAG_FILE_SORTED\t0\t/0=unsorted, 1=sorted/
+"
 
 let process_file () =
   let arg = !Pcaml.input_file in
   let in_file = arg in
   let out_file = Sys.getenv Argcamlp4.tmp in 
   let name = Filename.basename in_file in
-  let sini, nini = Entry.line in_file name 1 in
+  let modulename = String.capitalize (Filename.chop_extension name) in
   let lg_file = Entry.size_ml () in
   let fsl = make_strings in_file lg_file in
   Line.lookup fsl;
   let lef, nef = Entry.format in_file fsl in
-  let total = nini + nef in
+  let total = nef in
   let chan = open_out out_file in
   begin
-    header chan in_file total;
-    List.iter (output_string chan) (sini :: lef);
+    header chan;
+    List.iter (output_string chan) lef;
     flush chan;
     close_out chan
   end
 
 let _ = at_exit process_file
+
